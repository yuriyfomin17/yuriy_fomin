Brief thoughts:

    I decided to use queue data structure and breadth first search algorithm to solve this task.
    From problem description we need to visit every point in city matrix where pizza can be delivered from nearby pizzeria. This should be done for all pizzerias.
    Hence, I believe that queue (with first in and first out approach) is ideal as it allows to process every city matrix point where pizza can be delivered.

    <--------------------------------------------------------------------Start Algorithm for each pizzeria----------------------------------------------------------->
        1. When first delivery point element of the queue is removed. Matrix city point value is incremented.
        2. North, south, west and east adjacent delivery points are analyzed
        3. If it happens that pizza delivery guy can't visit the adjacent point due to
                a. His distance radius is small
                b. or he has already visited this point
                next adjacent point won't be added to the queue.
            otherwise adjacent delivery point is added to the queue and it will be processed later on by queue with first in and first out approach.

        Process will be repeated till the queue size is not empty.
    <----------------------------------------------------------------------End Algorithm for each pizzeria----------------------------------------------------------->

    This BFS algorithm is repeated for each pizzeria and city matrix point is incremented each time for the given pizzeria


Time Complexity Analysis: Each pizzeria will visit at most one point in city matrix exactly once.
                          Hence, higher bound time complexity is O(N * N) for each pizzeria where N is number of rows and columns.
                          Overall upper bound time complexity of algorithm for all pizzerias is O(P * N^2) where P is number of pizzerias.
                          However, it is quite often that radius distance will not cover whole city matrix for each pizzeria so
                          it is unlikely that order of growth for each pizzeria will be O(N^2). Order of growth also depends on radius of delivery.

                          At the same time lower bound order of growth can be O(P * 1) given that radius of delivery for each pizzeria is 0

Space Complexity Analysis: For each pizzeria bfs algorithm would need to traverse every delivery point. Hence, space complexity in queue is
                           O(( DV1) + (DV2) +  (DV3) + .... + ( DVN) ) where  DV is number of delivery points for 1, 2, 3 ... Nth pizzeria respectively.
                           Each pizzeria has different number of delivery points, so queue can take at most sum of all delivery points for all pizzerias.
                           This is the worst case since queue can hold all delivery points for all pizzerias.
